

importaNegociacoes() {

    let service = new NegociacaoService();
    service.obterNegociacoesDaSemana((erro, negociacoes) => {
        if(erro) {
            this._mensagem.texto = erro;
            return;
        }
        negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));

        service.obterNegociacoesDaSemanaAnterior((erro, negociacoes) => {
            if(erro) {
                this._mensagem.texto = erro;
                return;
            }
            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
            
            service.obterNegociacoesDaSemanaRetrasada((erro, negociacoes) => {
                if(erro) {
                    this._mensagem.texto = erro;
                    return;
                }
                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
                this._mensagem.texto = 'Negociações importadas com sucesso';
            });
        });
    });
}



Conseguimos resolver o nosso problema, mas se analisarmos o "desenho" do código,
veremos que ele forma uma pirâmide. Costumamos dar o nome de Pyramid of Doom
(traduzida para o português, significa pirâmide do destino) em situações que isto
ocorre e temos uma função aninhada dentro de outra. A pirâmide é um forte indício
de que temos problemas de legitimidade do código, na verdade, é o sintoma de um
problema maior, o Callback Hell. Ocorre quando temos requisições assíncronas
executadas em determinada ordem, que chama vários callbacks seguidos.

Se tivéssemos mais ações que precisassem ser executadas em ordem, teríamos um pirâmide
com mais funções. Também vale ressaltar: em uma situação de erro - por exemplo,
se a URL estivesse equivocada -, dentro do importaNegociacoes, executaríamos diversos
trechos de código referentes ao erro. Testaríamos diversas vezes se ocorreu o erro,
porque o código está repetido.