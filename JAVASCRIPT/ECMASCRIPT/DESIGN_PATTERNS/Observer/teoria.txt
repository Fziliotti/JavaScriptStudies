O padrão de projeto Observer
Usamos o padrão de projeto Observer sempre que queremos notificar 
partes do sistema interessadas quando um evento importante 
for disparado em nosso sistema.




O Observer é útil quando precisamos que dois ou mais objetos "escutem" 
a determinados eventos em um outro objeto. Os objetos que estão escutando 
são conhecidos como Observers e o objeto que é escutado (ou observado) é 
conhecido como Subject.

site:https://www.thiengo.com.br/padrao-de-projeto-observer

Exmplo pratico:

sempre que você adiciona ou altera um elemento de uma lista, e essa 
lista é usada para renderizar elementos na view, após fazer qualquer um desses 
dois processos, voce terá atualizar a view.

Para automatizar esse processo de atualizar a view apos uma mudança no Model,
você pode usar o pattern Observer. 



EM JAVA:

public interface Subject {
    public void addObserver(Observer observer);
    public void removeObserver(Observer observer);
    public void notifyObservers();
}
public interface Observer {
    public void update( float temperatura, float umidade, float pressao );
}

public class EstacaoMeteorologica implements Subject {
    private List<Observer> observers; /* NOSSAS ENTIDADES OBSERVADORAS ESTÃO AQUI */
    private float temperatura;
    private float umidade;
    private float pressao;

    public EstacaoMetereologica(){
        observers = new ArrayList<>();
    }

    public void setMedicoes( float temperatura, float umidade, float pressao ){
        this.temperatura = temperatura;
        this.umidade = umidade;
        this.pressao = pressao;

        notifyObservers();
    }

    @Override
    public void addObserver(Observer observer) {
        observers.add( observer );
    }

    @Override
    public void removeObserver(Observer observer) {
        int index = observers.indexOf( observer );
        if( index > -1 ){
            observers.remove( observer );
        }
    }

    @Override
    public void notifyObservers() { /* MÉTODO ONDE HÁ A COMUNICAÇÃO DA MUDANÇA DE ESTADO */
        for( Observer o :observers ){
            o.update( temperatura, umidade, pressao );
        }
    }
}


public class EstatisticasDisplay implements Observer {
    private Subject subject;
    ...

    public EstatisticasDisplay( Subject subject ){
        this.subject = subject;
        this.subject.addObserver( this );
    }

    private void display(){
        ...
    }

    @Override
    public void update(float temperatura, float umidade, float pressao) {
        this.temperatura = temperatura;
        this.umidade = umidade;
        this.pressao = pressao;
        display();
    }
}


public class TesteEstacao {
    public static void main(String[] args) {
        EstacaoMeteorologica estacao = new EstacaoMeteorologica();

        EstatisticasDisplay estatisticasDisplay = new EstatisticasDisplay( estacao );
        MediaDisplay mediaDisplay = new MediaDisplay( estacao );
        PressaoAtmosfericaDisplay pressaoAtmosfericaDisplay = new PressaoAtmosfericaDisplay( estacao );

        estacao.setMedicoes(87, 47, 14.4f);
        estacao.setMedicoes(91, 23, 108.2f);
        estacao.setMedicoes(65, 30, 41.2f);
    }
}