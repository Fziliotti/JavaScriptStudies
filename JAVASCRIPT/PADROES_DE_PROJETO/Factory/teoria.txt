Factory 

Nada mais é do que uma classe especializada em criar objetos

1) Ele é utilizado quando precisamos facilitar a criação de um objeto.

2) É ideal quando queremos criar objetos similares, com apenas seus 
detalhes diferentes, que podemos passar nos argumentos da Factory.

3) É bom para abstrair a criação de um objeto complexo, já que o 
programador que utilizar a Factory não precisa necessariamente saber 
como é feita esta operação.


O padrão de projeto Factory é um dos padrões mais utilizados no
desenvolvimento. Ele é mais um da categoria dos patterns responsáveis
por criar objetos, como o Builder e o Prototype.


Você pode colocar a regra de instanciação do objeto dentro de uma Factory:
class NegociacaoFactory {

    static create(tipoNegociacao, dados) {
        if(tipoNegociacao == "opcao") {
            return new NegociacaoOpcao(dados.data, dados.quantidade, dados.valor);
        }
        return new NegociacaoAcao(dados.data, dados.quantidade, dados.valor);
    }
}

let n = NegociacaoFactory.create("acao", {'data': new Date(), 'quantidade': 2, 'valor': 34.3});


As fábricas não só fazem parte do nosso código, como também da API do JavaScript.
Já existem várias classes que aproveitam esse padrão.


Por exemplo, a classe String possui um método (ou factory method) para transformar vários CharCode em uma string:
let abc = String.fromCharCode(65, 66, 67);  // "ABC"


Outro exemplo é a classe Array, que pode receber uma string ou um iterável, como lista ou mapas, para criar um array:
let d = Array.from("abc");
["a", "b", "c"]


Ou seja, um factory method nem sempre precisa estar dentro de uma classe dedicada. No exemplo desse exercício, não existe uma classe StringFactory ou ArrayFactory. O método pode fazer parte da classe em questão.

Além disso, o factory method não precisa se chamar create ou constroi. Outros nomes são válidos, como from ou getInstance.